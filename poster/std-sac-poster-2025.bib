@article{blackman2021scrambled,
author = {Blackman, David and Vigna, Sebastiano},
title = {Scrambled Linear Pseudorandom Number Generators},
year = {2021},
issue_date = {December 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {4},
issn = {0098-3500},
url = {https://doi.org/10.1145/3460772},
doi = {10.1145/3460772},
abstract = {F2-linear pseudorandom number generators are very popular due to their high speed, to the ease with which generators with a sizable state space can be created, and to their provable theoretical properties. However, they suffer from linear artifacts that show as failures in linearity-related statistical tests such as the binary-rank and the linear-complexity test. In this article, we give two new contributions. First, we introduce two new F2-linear transformations that have been handcrafted to have good statistical properties and at the same time to be programmable very efficiently on superscalar processors, or even directly in hardware. Then, we describe some scramblers, that is, nonlinear functions applied to the state array that reduce or delete the linear artifacts, and propose combinations of linear transformations and scramblers that give extremely fast pseudorandom number generators of high quality. A novelty in our approach is that we use ideas from the theory of filtered linear-feedback shift registers to prove some properties of our scramblers, rather than relying purely on heuristics. In the end, we provide simple, extremely fast generators that use a few hundred bits of memory, have provable properties, and pass strong statistical tests.},
journal = {ACM Trans. Math. Softw.},
month = sep,
articleno = {36},
numpages = {32},
keywords = {Pseudorandom number generators}
}

@inproceedings{cardenas2011sensitiveness,
  title={Sensitiveness of evolutionary algorithms to the random number generator},
  author={C{\'a}rdenas-Montes, Miguel and Vega-Rodr{\'\i}guez, Miguel A and G{\'o}mez-Iglesias, Antonio},
  booktitle={Adaptive and Natural Computing Algorithms: 10th International Conference, ICANNGA 2011, Ljubljana, Slovenia, April 14-16, 2011, Proceedings, Part I 10},
  pages={371--380},
  year={2011},
  organization={Springer}
}

@article{JAMES1994111,
title = {RANLUX: A Fortran implementation of the high-quality pseudorandom number generator of Lüscher},
journal = {Computer Physics Communications},
volume = {79},
number = {1},
pages = {111-114},
year = {1994},
issn = {0010-4655},
doi = {https://doi.org/10.1016/0010-4655(94)90233-X},
url = {https://www.sciencedirect.com/science/article/pii/001046559490233X},
author = {F. James},
abstract = {Following some remarks on the quality of pseudorandom number generators commonly used in Monte Carlo calculations in computational physics, we offer a portable Fortran 77 implementation of a high-quality generator called RANLUX (for LUXury RANdom numbers), using the algorithm of Martin Lüscher described in an accompanying article. The implementation allows the user to select different quality or luxury levels, where higher quality requires somewhat longer computing time for the generation. There is a convenient way of initialization (appropriate also for massively parallel Monte Carlo computations) as well as two different methods of restarting from a break point.}
}

@article{marsaglia1997diehard,
  title={The Diehard random number testsuite},
  author={Marsaglia, George},
  journal={http://stat.fsu.edu/pub/diehard},
  year={1997}
}

@article{marsaglia2003random,
  title={Random number generators},
  author={Marsaglia, George},
  journal={Journal of Modern Applied Statistical Methods},
  volume={2},
  number={1},
  pages={2},
  year={2003}
}

@article{mersennetwister,
author = {Matsumoto, Makoto and Nishimura, Takuji},
title = {Mersenne twister: a 623-dimensionally equidistributed uniform pseudo-random number generator},
year = {1998},
issue_date = {Jan. 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {1},
issn = {1049-3301},
url = {https://doi.org/10.1145/272991.272995},
doi = {10.1145/272991.272995},
abstract = {A new algorithm called Mersenne Twister (MT) is proposed for generating uniform pseudorandom numbers. For a particular choice of parameters, the algorithm provides a super astronomical period of 219937-1 and 623-dimensional equidistribution up to 32-bit accuracy, while using a working area of only 624 words. This is a new variant of the previously proposed generators, TGFSR, modified so as to admit a Mersenne-prime period. The characteristic polynomial has many terms. The distribution up to v bits accuracy for 1 ≤ v ≤ 32 is also shown to be good. An algorithm is also given that checks the primitivity of the characteristic polynomial of MT with computational complexity O(p2) where  p is the degree of the polynomial.We implemented this generator in portable C-code. It passed several stringent statistical tests, including diehard. Its speed is comparable to other modern generators. Its merits are due to the efficient algorithms that are unique to polynomial calculations over the two-element field.},
journal = {ACM Trans. Model. Comput. Simul.},
month = jan,
pages = {3-30},
numpages = {28},
keywords = {tempering, random number generation, primitive polynomials, multiple-recursive matrix method, inversive-decimation method, incomplete array, finite fields, TGFSR, Mersenne twister, Mersenne primes, MT19937, GFSR, m-sequences, k-distribution}
}

@misc{overton2020romufastnonlinearpseudorandom,
      title={Romu: Fast Nonlinear Pseudo-Random Number Generators Providing High Quality},
      author={Mark A. Overton},
      year={2020},
      eprint={2002.11331},
      archivePrefix={arXiv},
      primaryClass={cs.DC},
      url={https://arxiv.org/abs/2002.11331},
}

@software{perf,
  author       = {Thomas Gleixner and Ingo Molnar},
  date         = {2008-12-04},
  title        = {perf: Linux profiling with performance counters},
  name         = {perf},
  note         = {First commint in Linux repository: \url{https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=0793a61d4df8daeac6492dbf8d2f3e5713caae5e}. Version: 6.10.12-200.fc40.x86\_64 from 2024-09-30},
  organization = {Linux Foundation},
  url          = {https://perf.wiki.kernel.org/},
  version      = {6.10.12-200.fc40.x86\_64 from 2024-09-30},
  year         = {2008},
}

@inproceedings{rapl,
    address={New York, NY, USA},
    author={Garcia, Joe A.},
    booktitle={2019 IEEE Space Computing Conference (SCC)},
    doi={10.1109/SpaceComp.2019.00005},
    number={},
    pages={1-10},
    publisher={IEEE},
    title={Exploration of Energy Consumption Using the Intel Running Average Power Limit Interface},
    volume={},
    year={2019},
}

@article{testu01,
author = {L'Ecuyer, Pierre and Simard, Richard},
title = {TestU01: A C library for empirical testing of random number generators},
year = {2007},
issue_date = {August 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {4},
issn = {0098-3500},
url = {https://doi.org/10.1145/1268776.1268777},
doi = {10.1145/1268776.1268777},
abstract = {We introduce TestU01, a software library implemented in the ANSI C language, and offering a collection of utilities for the empirical statistical testing of uniform random number generators (RNGs). It provides general implementations of the classical statistical tests for RNGs, as well as several others tests proposed in the literature, and some original ones. Predefined tests suites for sequences of uniform random numbers over the interval (0, 1) and for bit sequences are available. Tools are also offered to perform systematic studies of the interaction between a specific test and the structure of the point sets produced by a given family of RNGs. That is, for a given kind of test and a given class of RNGs, to determine how large should be the sample size of the test, as a function of the generator's period length, before the generator starts to fail the test systematically. Finally, the library provides various types of generators implemented in generic form, as well as many specific generators proposed in the literature or found in widely used software. The tests can be applied to instances of the generators predefined in the library, or to user-defined generators, or to streams of random numbers produced by any kind of device or stored in files. Besides introducing TestU01, the article provides a survey and a classification of statistical tests for RNGs. It also applies batteries of tests to a long list of widely used RNGs.},
journal = {ACM Trans. Math. Softw.},
month = aug,
articleno = {22},
numpages = {40},
keywords = {statistical test, random number tests, random number generators, Statistical software}
}